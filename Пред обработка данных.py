# Предварительная обработка данных

импортировать  numpy  как  np
из  предварительной обработки импорта sklearn

input_data  =  np . массив ([[ 2.1 , - 1.9 , 5.5 ],
                      [ - 1,5 , 2,4 , 3,5 ],
                      [ 0,5 , - 7,9 , 5,6 ],
                      [ 5.9 , 2.3 , - 5.8 ]])

# Применение методов предварительной обработки

# Бинар
data_binarized  =  предварительная обработка . Бинаризатор ( порог  =  0,5 ). преобразовать ( input_data )
print ( " \ t Бинаризация \ n " , data_binarized )

# Мидл удаление
print ( " \ n \ t Среднее удаление \ n mean =" , input_data . mean ( axis  =  0 )) # Средние значения по сплюс массиву
print ( "Стандартное отклонение =" , input_data . std ( axis  =  0 )) # вычисляет среднеквадрат отклонения

data_scaled  =  предварительная обработка . scale ( input_data ) # Метод предварительной обработки. scale () полезен при стандартизации точек данных. Разделить все точки данных на среднее значение и вычесть стандартное отклонение для каждой точки данных.
print ( " \ n среднее =" , масштаб_данных . среднее ( ось  =  0 ))
print ( "стандартное отклонение =" , масштаб_данных . std ( ось  =  0 ))

# Пересчет
data_scaler_minmax  =  предварительная обработка . MinMaxScaler ( feature_range = ( 0 , 1 ))
data_scaled_minmax  =  data_scaler_minmax . fit_transform ( input_data ) # Вычисление -> преобразование
print ( " \ n \ t Пересчет \ n " , data_scaled_minmax )

data_normalized_l1  =  предварительная обработка . normalize ( input_data , norm  =  'l1' ) # l1 (норм)
print ( " \ n \ t L1 нормализация \ n " , data_normalized_l1 )

data_normalized_l2  =  предварительная обработка . normalize ( input_data , norm  =  'l2' ) # l2 (норм)
print ( " \ n \ t L2 нормализация \ n " , data_normalized_l2 )
